@{
    ViewData["Title"] = "Radio Hub";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <!-- Player Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5>🎵 Now Playing</h5>
                </div>
                <div class="card-body text-center">
                    <!-- Now Playing Info -->
                    <div id="nowPlaying" class="mb-3">
                        <p class="text-muted">No song is currently playing</p>
                    </div>

                    <!-- Visualizer -->
                    <canvas id="visualizer" width="600" height="100" style="width: 100%; background: #f8f9fa; border-radius: 5px;"></canvas>

                    <!-- Live Stream Button -->
                    <div class="mt-3">
                        <button id="listenLiveBtn" class="btn btn-success btn-lg">
                            <i class="bi bi-broadcast"></i> Listen Live
                        </button>
                        <p class="text-muted small mt-2">Click to start the live radio broadcast</p>
                    </div>
                </div>
            </div>

            <!-- Search Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5>🔍 Search for Songs</h5>
                </div>
                <div class="card-body">
                    <div class="input-group mb-3">
                        <input type="text" id="searchQuery" class="form-control" placeholder="Enter song name or artist..." />
                        <button class="btn btn-primary" id="searchButton">
                            <i class="bi bi-search"></i> Search
                        </button>
                    </div>
                    <div id="searchResults" class="row">
                        <!-- Search results will be populated here -->
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Queue Section -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>📋 Queue</h5>
                    <button id="clearQueueBtn" class="btn btn-sm btn-outline-danger">Clear</button>
                </div>
                <div class="card-body">
                    <div id="queueStatus" class="mb-3 p-3 bg-light rounded">
                        <p class="mb-1"><strong>Total songs:</strong> <span id="totalSongs" class="badge bg-primary">0</span></p>
                        <p class="mb-0"><strong>Status:</strong> <span id="playingStatus" class="badge bg-secondary">Not playing</span></p>
                    </div>
                    <div id="songQueue" class="list-group" style="max-height: 500px; overflow-y: auto;">
                        <!-- Queue items populated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Request Song Modal -->
<div class="modal fade" id="requestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">🎵 Request Song</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>You're requesting: <strong id="requestModalSongTitle"></strong></p>
                <div class="mb-3">
                    <label for="requesterName" class="form-label">Your Name:</label>
                    <input type="text" class="form-control" id="requesterName" placeholder="Enter your name" required>
                    <div class="invalid-feedback" id="requesterNameError" style="display: none;">
                        Please enter your name.
                    </div>
                </div>
                <div class="mb-3">
                    <label for="requesterNote" class="form-label">Message/Note (optional):</label>
                    <textarea class="form-control" id="requesterNote" placeholder="Write a note to the DJ"></textarea>
                </div>
                <input type="hidden" id="requestModalVideoId">
                <input type="hidden" id="requestModalTitle">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmRequestBtn">
                    <i class="bi bi-check-circle"></i> Request Song
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        // Global variables
        let liveAudioPlayer = null;
        let isLivePlaying = false;
        let connection = null;
        let queue = [];
        let currentlyPlaying = null;
        const ICECAST_URL = 'http://localhost:8087/live';

        // Initialize on page ready
        $(document).ready(function() {
            initializeSignalR();
            setupEventHandlers();
        });

        // SignalR for queue updates
        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl('/radioHub')
                .build();

            connection.on('UpdateQueue', updateQueueDisplay);
            connection.on('SongStarted', data => updateNowPlaying(data));
            connection.on('SongEnded', data => currentlyPlaying = null);
            connection.start().then(() => console.log('SignalR connected'))
                      .catch(err => console.error(err));
        }

        // Event handlers
        function setupEventHandlers() {
            $('#listenLiveBtn').click(toggleLiveStream);
            $('#searchButton').click(searchSongs);
            $('#searchQuery').keypress(e => { if (e.which === 13) searchSongs(); });
            $('#confirmRequestBtn').click(confirmRequest);
            $('#requesterName').keypress(e => { if(e.which === 13) confirmRequest(); });
            $('#clearQueueBtn').click(clearQueue);
        }

        // Live Stream Play/Stop
        function toggleLiveStream() {
            if (isLivePlaying) stopLiveStream();
            else playLiveStream();
        }

        function playLiveStream() {
            if (isLivePlaying) return;

            liveAudioPlayer = new Audio(ICECAST_URL);
            liveAudioPlayer.autoplay = true;

            liveAudioPlayer.addEventListener('playing', () => isLivePlaying = true);
            liveAudioPlayer.addEventListener('pause', () => isLivePlaying = false);
            liveAudioPlayer.addEventListener('error', e => {
                console.error('Stream error', e);
                isLivePlaying = false;
            });

            liveAudioPlayer.play().catch(err => alert('Click the button to start live stream'));
            updateLiveButton();
            startVisualizer();
        }

        function stopLiveStream() {
            if (!liveAudioPlayer) return;
            liveAudioPlayer.pause();
            liveAudioPlayer.src = '';
            liveAudioPlayer.load();
            isLivePlaying = false;
            updateLiveButton();
            stopVisualizer();
        }

        function updateLiveButton() {
            const btn = $('#listenLiveBtn');
            if (isLivePlaying) {
                btn.html('<i class="bi bi-stop-fill"></i> Stop Live Stream').removeClass('btn-success').addClass('btn-danger');
            } else {
                btn.html('<i class="bi bi-broadcast"></i> Listen Live').removeClass('btn-danger').addClass('btn-success');
            }
        }

        let canvas, ctx, animationId;
        let audioContext, analyser, source;
        let frequencyData;

        function startVisualizer() {
            if (!liveAudioPlayer) return;
            canvas = document.getElementById('visualizer');
            ctx = canvas.getContext('2d');

            // Web Audio API setup
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                analyser = audioContext.createAnalyser();
                analyser.fftSize = 256; // Number of samples, smaller = smoother
                frequencyData = new Uint8Array(analyser.frequencyBinCount);

                source = audioContext.createMediaElementSource(liveAudioPlayer);
                source.connect(analyser);
                analyser.connect(audioContext.destination);
            }

            function draw() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                analyser.getByteFrequencyData(frequencyData);

                const bars = frequencyData.length;
                const barWidth = canvas.width / bars;

                for (let i = 0; i < bars; i++) {
                    const value = frequencyData[i];
                    const percent = value / 255;
                    const barHeight = percent * canvas.height;

                    const hue = 120 - percent * 120; // green to red
                    ctx.fillStyle = `hsl(${hue}, 80%, 50%)`;
                    ctx.shadowColor = `hsl(${hue}, 80%, 50%)`;
                    ctx.shadowBlur = 10;

                    ctx.fillRect(i * barWidth, canvas.height - barHeight, barWidth - 1, barHeight);
                }

                animationId = requestAnimationFrame(draw);
            }

            draw();
        }

        function stopVisualizer() {
            if (animationId) cancelAnimationFrame(animationId);
            if (ctx && canvas) ctx.clearRect(0, 0, canvas.width, canvas.height);
        }


        // Queue handling
        function updateQueueDisplay(queueViewModel) {
            queue = queueViewModel.queue || [];
            currentlyPlaying = queueViewModel.currentlyPlaying;

            $('#totalSongs').text(queueViewModel.totalSongs);
            $('#playingStatus').text(queueViewModel.isPlaying ? 'Playing' : 'Not playing')
                .removeClass('bg-success bg-secondary')
                .addClass(queueViewModel.isPlaying ? 'bg-success' : 'bg-secondary');

            updateNowPlaying(currentlyPlaying);

            const songQueue = $('#songQueue');
            songQueue.empty();
            if (!queue.length) {
                songQueue.html('<p class="text-muted text-center p-3">The queue is empty.</p>');
                return;
            }

            queue.forEach((song, idx) => {
                const item = `<div class="list-group-item">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center mb-1">
                                <span class="badge bg-secondary me-2">${idx+1}</span>
                                <h6 class="mb-0">${song.title}</h6>
                            </div>
                            <small class="text-muted"><i class="bi bi-person"></i> ${song.requesterName} ${song.note ? '- ' + song.note : ''}</small>
                        </div>
                        <button class="btn btn-sm btn-outline-danger ms-2" onclick="removeSong('${song.youtubeVideoId}')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>`;
                songQueue.append(item);
            });
        }

        function updateNowPlaying(song) {
            const nowPlayingDiv = $('#nowPlaying');
            if (!song) {
                nowPlayingDiv.html('<p class="text-muted">No song is currently playing</p>');
                return;
            }
            nowPlayingDiv.html(`
                <h5 class="mb-1">${song.title}</h5>
                <p class="mb-0 text-muted">
                    <i class="bi bi-person-fill"></i> Requested by: ${song.requesterName}
                    ${song.note ? '<br><i class="bi bi-chat-text"></i> Note: ' + song.note : ''}
                </p>
            `);
        }

        function searchSongs() {
            const query = $('#searchQuery').val().trim();
            if (!query) return;

            $('#searchButton').prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Searching...');
            $.post('/Song/Search', { query })
                .done(resp => resp.success === false ? alert(resp.message || 'Error') : displaySearchResults(resp.results))
                .fail(() => alert('Error searching songs'))
                .always(() => $('#searchButton').prop('disabled', false).html('<i class="bi bi-search"></i> Search'));
        }

        function displaySearchResults(results) {
            const container = $('#searchResults');
            container.empty();
            if (!results.length) return container.html('<p class="text-center text-muted">No results found.</p>');

            results.forEach(result => {
                const card = `<div class="col-md-6 mb-3">
                    <div class="card h-100 shadow-sm">
                        <img src="${result.thumbnailUrl}" class="card-img-top" style="height:120px;object-fit:cover">
                        <div class="card-body p-2">
                            <h6 class="card-title text-truncate" title="${result.title}">${result.title}</h6>
                            <p class="card-text small text-muted">${result.channelTitle} - ${result.durationDisplay}</p>
                            <button class="btn btn-sm btn-primary w-100" onclick="requestSong('${result.videoId}', \`${result.title.replace(/`/g,'\\`')}\`)">
                                <i class="bi bi-plus-circle"></i> Add to Queue
                            </button>
                        </div>
                    </div>
                </div>`;
                container.append(card);
            });
        }

        function requestSong(videoId, title) {
            $('#requestModalVideoId').val(videoId);
            $('#requestModalTitle').val(title);
            $('#requestModalSongTitle').text(title);
            $('#requesterName').val('');
            $('#requesterNote').val('');
            $('#requesterNameError').hide();
            $('#requestModal').modal('show');
        }

        function confirmRequest() {
            const videoId = $('#requestModalVideoId').val();
            const title = $('#requestModalTitle').val();
            const requesterName = $('#requesterName').val().trim();
            const note = $('#requesterNote').val().trim();

            if (!requesterName) return $('#requesterNameError').show();
            $('#requesterNameError').hide();
            $('#requestModal').modal('hide');

            $.post('/Song/RequestSong', { videoId, title, requesterName, note })
                .done(() => { showToast(`"${title}" added to queue!`, 'success'); $('#searchResults').empty(); $('#searchQuery').val(''); loadQueueStatus(); })
                .fail(() => showToast('Error adding song', 'danger'));
        }

        function removeSong(videoId) {
            if (!confirm('Remove this song from queue?')) return;
            $.post('/Song/RemoveSong', { videoId })
                .done(() => { showToast('Song removed from queue','info'); loadQueueStatus(); })
                .fail(() => showToast('Error removing song','danger'));
        }

        function clearQueue() {
            if (!confirm('Clear entire queue?')) return;
            $.post('/Song/ClearQueue')
                .done(() => { showToast('Queue cleared','info'); loadQueueStatus(); })
                .fail(() => showToast('Error clearing queue','danger'));
        }

        function loadQueueStatus() {
            $.get('/Song/GetQueueStatus')
                .done(updateQueueDisplay)
                .fail(() => console.error('Error loading queue'));
        }

        function showToast(message, type='success') {
            const toastHtml = `<div class="toast align-items-center text-white bg-${type} border-0" role="alert" style="position:fixed;top:20px;right:20px;z-index:9999;">
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            </div>`;
            $('body').append(toastHtml);
            const toastEl = $('.toast').last()[0];
            const toast = new bootstrap.Toast(toastEl, { delay: 3000 });
            toast.show();
            setTimeout(() => $(toastEl).remove(), 4000);
        }
    </script>
}
