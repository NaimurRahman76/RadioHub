@{
    ViewData["Title"] = "Radio Hub";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <!-- Search Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Search for Songs</h5>
                </div>
                <div class="card-body">
                    <div class="input-group mb-3">
                        <input type="text" id="searchQuery" class="form-control" placeholder="Enter song name or artist..." />
                        <button class="btn btn-primary" id="searchButton">Search</button>
                    </div>
                    <div id="searchResults" class="row">
                        <!-- Search results will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Player Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Now Playing</h5>
                </div>
                <div class="card-body">
                    <div id="nowPlaying" class="text-center mb-3">
                        <p class="mb-1">No song is currently playing</p>
                    </div>
                    
                    <!-- Audio Player -->
                    <div class="audio-player mb-3">
                        <audio id="audioPlayer" controls class="w-100" style="display: none;"></audio>
                        <div id="waveform" class="mb-3"></div>
                        <div class="d-flex align-items-center mb-3">
                            <button id="playPauseBtn" class="btn btn-primary me-3">Play</button>
                            <div class="progress flex-grow-1" id="progressBar">
                                <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                            </div>
                            <span id="timeDisplay" class="ms-3">0:00 / 0:00</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Queue Section -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Queue</h5>
                    <div>
                        <button id="clearQueueBtn" class="btn btn-sm btn-outline-danger">Clear</button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="queueStatus" class="mb-3">
                        <p class="mb-1">Total songs: <span id="totalSongs">0</span></p>
                        <p class="mb-0">Status: <span id="playingStatus">Not playing</span></p>
                    </div>
                    <div id="songQueue" class="list-group">
                        <!-- Queue items will be populated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- HTML5 audio will be used instead of external libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        // Global variables
        let audioPlayer = null;
        let connection = null;
        let isPlaying = false;
        let currentSong = null;
        let queue = [];
        let currentlyPlaying = null;

        // Initialize the application
        $(document).ready(function () {
            // Initialize audio player first
            audioPlayer = document.getElementById('audioPlayer');
            
            initializeSignalR();
            setupAudioPlayer();
            loadQueueStatus();
            setupEventHandlers();
        });

        // Setup event handlers
        function setupEventHandlers() {
            $('#searchButton').click(searchSongs);
            $('#searchQuery').keypress(function (e) {
                if (e.which === 13) {
                    searchSongs();
                }
            });
            
            $('#playPauseBtn').click(togglePlayback);
            $('#clearQueueBtn').click(clearQueue);
        }

        // Initialize SignalR connection
        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl('/radioHub')
                .build();

            connection.on('UpdateQueue', function (queueViewModel) {
                updateQueueDisplay(queueViewModel);
            });

            connection.on('SongStarted', function (song) {
                playSong(song);
            });

            connection.on('SongStopped', function () {
                stopCurrentSong();
            });

            connection.start().catch(function (err) {
                return console.error(err.toString());
            });
        }

        // Setup audio player with HTML5 audio
        function setupAudioPlayer() {
            // Audio player event handlers
            audioPlayer.addEventListener('loadedmetadata', function() {
                updateDuration();
            });
            
            audioPlayer.addEventListener('timeupdate', function() {
                updateProgress();
            });
            
            audioPlayer.addEventListener('ended', function() {
                isPlaying = false;
                updatePlayPauseButton();
                playNextSong();
            });

            // Progress bar click handler
            $('#progressBar').click(function (e) {
                if (audioPlayer) {
                    const progressBar = $(this);
                    const position = (e.pageX - progressBar.offset().left) / progressBar.width();
                    const seekTime = position * audioPlayer.duration;
                    
                    audioPlayer.currentTime = seekTime;
                    
                    // Update time display immediately
                    const timeDisplay = document.getElementById('timeDisplay');
                    timeDisplay.textContent = `${formatTime(seekTime)} / ${formatTime(audioPlayer.duration)}`;
                }
            });
        }

        // Search for songs
        function searchSongs() {
            const query = $('#searchQuery').val().trim();
            if (!query) return;

            $('#searchButton').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Searching...');

            $.post('/Song/Search', { query: query })
                .done(function (response) {
                    if (response.success === false) {
                        alert(response.message || 'Error searching for songs.');
                    } else {
                        displaySearchResults(response.results);
                    }
                })
                .fail(function () {
                    alert('Error searching for songs. Please try again.');
                })
                .always(function () {
                    $('#searchButton').prop('disabled', false).text('Search');
                });
        }

        // Display search results
        function displaySearchResults(results) {
            const searchResults = $('#searchResults');
            searchResults.empty();

            if (results.length === 0) {
                searchResults.html('<p class="col-12">No results found.</p>');
                return;
            }

            results.forEach(function (result) {
                const resultCard = `
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <img src="${result.thumbnailUrl}" class="card-img-top" alt="${result.title}" style="height: 120px; object-fit: cover;">
                            <div class="card-body p-2">
                                <h6 class="card-title">${result.title}</h6>
                                <p class="card-text small text-muted">${result.channelTitle} - ${result.durationDisplay}</p>
                                <button class="btn btn-sm btn-primary w-100" onclick="requestSong('${result.videoId}', '${result.title.replace(/'/g, "\\'")}')">Add to Queue</button>
                            </div>
                        </div>
                    </div>
                `;
                searchResults.append(resultCard);
            });
        }

        // Request a song
        function requestSong(videoId, title) {
            // Store song details for the modal
            $('#requestModalVideoId').val(videoId);
            $('#requestModalTitle').val(title);
            $('#requestModalSongTitle').text(title);
            $('#requesterName').val('');
            $('#requestModal').modal('show');
        }
        
        // Confirm song request
        function confirmRequest() {
            const videoId = $('#requestModalVideoId').val();
            const title = $('#requestModalTitle').val();
            const requesterName = $('#requesterName').val().trim();
            
            if (!requesterName) {
                $('#requesterNameError').show();
                return;
            }
            
            $('#requesterNameError').hide();
            $('#requestModal').modal('hide');
            
            $.post('/Song/RequestSong', { videoId: videoId, title: title, requesterName: requesterName })
                .done(function () {
                    alert(`"${title}" has been added to the queue!`);
                    loadQueueStatus();
                })
                .fail(function () {
                    alert('Error adding song to queue. Please try again.');
                });
        }

        // Load queue status
        function loadQueueStatus() {
            $.get('/Song/GetQueueStatus')
                .done(function (queueViewModel) {
                    updateQueueDisplay(queueViewModel);
                })
                .fail(function () {
                    console.error('Error loading queue status');
                });
        }

        // Update queue display
        function updateQueueDisplay(queueViewModel) {
            queue = queueViewModel.queue || [];
            currentlyPlaying = queueViewModel.currentlyPlaying;

            // Update queue status
            $('#totalSongs').text(queueViewModel.totalSongs);
            $('#playingStatus').text(queueViewModel.isPlaying ? 'Playing' : 'Not playing');

            // Update now playing
            const nowPlayingDiv = $('#nowPlaying');
            if (currentlyPlaying) {
                nowPlayingDiv.html(`
                    <h6>${currentlyPlaying.title}</h6>
                    <p class="mb-0">Requested by: ${currentlyPlaying.requesterName}</p>
                `);
                
                // If there's a currently playing song but it's not loaded in the audio player, load it
                if (!audioPlayer.src || !audioPlayer.src.includes(currentlyPlaying.youtubeVideoId)) {
                    playSong(currentlyPlaying);
                }
            } else {
                nowPlayingDiv.html('<p class="mb-1">No song is currently playing</p>');
                
                // If there's no currently playing song but there are songs in the queue, play the next one
                if (queue.length > 0 && !isPlaying) {
                    playNextSong();
                }
            }

            // Update queue list
            const songQueue = $('#songQueue');
            songQueue.empty();

            if (queue.length === 0) {
                songQueue.html('<p class="text-muted">The queue is empty.</p>');
                return;
            }

            queue.forEach(function (song, index) {
                const queueItem = `
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-1">${song.title}</h6>
                            <small class="text-muted">Requested by: ${song.requesterName}</small>
                        </div>
                        <button class="btn btn-sm btn-outline-danger" onclick="removeSong('${song.youtubeVideoId}')">Remove</button>
                    </div>
                `;
                songQueue.append(queueItem);
            });
        }

        // Play a song
        function playSong(song) {
            currentSong = song;
            
            // Update now playing display
            $('#nowPlaying').html(`
                <h6>${song.title}</h6>
                <p class="mb-0">Requested by: ${song.requesterName}</p>
            `);

            // Load and play the song
            const audioUrl = `/Song/Stream/${song.youtubeVideoId}`;
            
            // Show the audio player and load the song
            audioPlayer.style.display = 'block';
            audioPlayer.src = audioUrl;
            
            // Play the song when it's loaded
            audioPlayer.addEventListener('canplay', function() {
                audioPlayer.play();
                isPlaying = true;
                updatePlayPauseButton();
            }, { once: true });
        }

        // Stop current song
        function stopCurrentSong() {
            if (audioPlayer) {
                audioPlayer.pause();
                audioPlayer.currentTime = 0;
                audioPlayer.src = '';
                audioPlayer.style.display = 'none';
            }

            currentSong = null;
            isPlaying = false;
            updatePlayPauseButton();
            
            // Update now playing display
            $('#nowPlaying').html('<p class="mb-1">No song is currently playing</p>');
        }

        // Toggle playback
        function togglePlayback() {
            if (!audioPlayer || !audioPlayer.src) {
                // If no song is loaded, try to play the first song in queue
                if (queue.length > 0) {
                    playNextSong();
                }
                return;
            }

            if (isPlaying) {
                audioPlayer.pause();
                isPlaying = false;
            } else {
                audioPlayer.play();
                isPlaying = true;
            }
            
            updatePlayPauseButton();
        }

        // Play next song
        function playNextSong() {
            $.post('/Song/PlayNextSong')
                .done(function () {
                    loadQueueStatus();
                })
                .fail(function () {
                    console.error('Error playing next song');
                });
        }

        // Remove song from queue
        function removeSong(videoId) {
            $.post('/Song/RemoveSong', { videoId: videoId })
                .done(function () {
                    loadQueueStatus();
                })
                .fail(function () {
                    alert('Error removing song from queue. Please try again.');
                });
        }

        // Clear queue
        function clearQueue() {
            if (confirm('Are you sure you want to clear the entire queue?')) {
                $.post('/Song/ClearQueue')
                    .done(function () {
                        loadQueueStatus();
                    })
                    .fail(function () {
                        alert('Error clearing queue. Please try again.');
                    });
            }
        }

        // Update play/pause button
        function updatePlayPauseButton() {
            const playPauseBtn = $('#playPauseBtn');
            playPauseBtn.text(isPlaying ? 'Pause' : 'Play');
        }

        // Update progress
          function updateProgress() {
              if (!audioPlayer || !audioPlayer.duration) return;
  
              const currentTime = audioPlayer.currentTime || 0;
              const duration = audioPlayer.duration || 0;
              const progressBar = $('.progress-bar');
              const timeDisplay = document.getElementById('timeDisplay');
  
              // Update progress bar
              if (duration > 0) {
                  progressBar.css('width', ((currentTime / duration) * 100) + '%');
              }
  
              // Update time display
              timeDisplay.textContent = `${formatTime(currentTime)} / ${formatTime(duration)}`;
          }
          
          // Update duration display
          function updateDuration() {
              if (!audioPlayer || !audioPlayer.duration) return;
              const timeDisplay = document.getElementById('timeDisplay');
              timeDisplay.textContent = `0:00 / ${formatTime(audioPlayer.duration)}`;
          }

        // Format time helper function
        function formatTime(seconds) {
            if (isNaN(seconds)) return '0:00';
            
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
        }

        // Start progress update when song starts playing
        setInterval(function() {
            if (isPlaying) {
                updateProgress();
            }
        }, 100);
    </script>
}

<!-- Request Song Modal -->
<div class="modal fade" id="requestModal" tabindex="-1" aria-labelledby="requestModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="requestModalLabel">Request Song</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>You're requesting: <strong id="requestModalSongTitle"></strong></p>
                <div class="mb-3">
                    <label for="requesterName" class="form-label">Your Name:</label>
                    <input type="text" class="form-control" id="requesterName" placeholder="Enter your name">
                    <div class="invalid-feedback" id="requesterNameError" style="display: none;">
                        Please enter your name.
                    </div>
                </div>
                <input type="hidden" id="requestModalVideoId">
                <input type="hidden" id="requestModalTitle">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmRequestBtn">Request Song</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        $('#confirmRequestBtn').click(function() {
            confirmRequest();
        });
    });
</script>